
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+SETUPFILE: "~/Drive/dev/doc/template/article.org"

#+TITLE:     Emacs
#+AUTHOR:    Алексей Шустов
#+EMAIL:     anshustov@gmail.com
#+DATE:      2020

* Конфигурация Emacs.
** TODO

 Потонцеальные пакеты:

- [ ] flycheck
- [ ] undo-tree
- [ ] Mu4e
- [ ] indium?
- [ ] tern?
- [ ] restclient?
- [ ] org-super-agenda
- [ ] org-noter?
- [ ] org-download?
- [ ] org-cliplink?
- [ ] markdown-mode+?
- [ ] markdown-toc?
- [ ] org-brain
- [ ] json-mode

Данная конфигурация Emacs создана с целью адаптировать его для WEB разработки в самом минималистичном дизайне. 
Целью создания была адаптация под маленькие экраны ноутбуков. Отключены все визуальные элементы emacs.

* Используемые пакеты
В данном разделе дано описание используемых пакетов.

*** Шрифт Hack
Hack - шрифт моноширинный c однозначным начертанием символов. Необходимо скачать и установить в систему.

Ссылка на проект:

https://github.com/source-foundry/Hack

*** doom-themes

Контрастная тема с черным фоном а также модлайн.

Ссылка на проект:

https://github.com/hlissner/emacs-doom-themes
https://github.com/seagle0128/doom-modeline

*** multiple-cursors

Пакет позволяющий включить несколько курсоров для одновременного ввода в нескольких местах.

Ссылка на проект:

https://github.com/magnars/multiple-cursors.el

*** yasnippet

Пакет для работы со снипетами (заготовками кода).

Ссылка на проект:

http://joaotavora.github.io/yasnippet/snippet-organization.html

*** company

Автодополнение при написании кода.

Ссылка на проект:

http://company-mode.github.io

*** magit

Оболочка для управления git в emacs.

Ссылка на проект:

https://magit.vc

*** indent-guide

Отображает уровень вложенности строк относительно текущей табуляции строки.

Ссылка на проект:

https://github.com/zk-phi/indent-guide

*** markdown-mode

Языковой пакет для markdown.

Ссылка на проект:

https://github.com/jrblevin/markdown-mode

*** web-mode

Мульти языковой пакет.

Ссылка на проект:

http://web-mode.org
*** zoom

Автоматически увеличивает размер активного буфера.

Ссылка на проект:

https://github.com/cyrus-and/zoom

*** auctex

Мульти языковой пакет для Tex подобной разметки (LaTex, XeLatex и т.д).

Ссылка на проект:

https://github.com/jwiegley/auctex

*** htmlize

Оформляет код в HTML для отображения на странице в виде блока.

Ссылка на проект:

https://github.com/hniksic/emacs-htmlize

*** projectile

Управление проектами.

Ссылка на проект:

https://github.com/bbatsov/projectile

*** emmet-mode

Добовляем функционал emmet.

Ссылка на проект:

https://github.com/smihica/emmet-mode

*** pug-mode

Режим pug

Ссылка на проект:

https://github.com/hlissner/emacs-pug-mode

*** js2-mode

js2-mode

Ссылка на проект:

https://github.com/mooz/js2-mode

*** smartparens

smartparens

Ссылка на проект:

https://github.com/Fuco1/smartparens
*** swiper counsel

swiper counsel

Ссылка на проект:

https://github.com/abo-abo/swiper

*** auctex

auctex

Ссылка на проект:

https://www.gnu.org/software/auctex/

*** latex-preview-pane

latex-preview-pane

Ссылка на проект:

https://github.com/jsinglet/latex-preview-pane


#+BEGIN_SRC emacs-lisp

#+END_SRC

* Конфигурация
** Менеджмент пакетов

 Автоматическая установка и обновление пакетов, используемых в use-package.

 #+BEGIN_SRC emacs-lisp
 (require 'package)

 (setq load-prefer-newer t)
 (setq warning-minimum-level :emergency)

 (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)
 (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
 ;;(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
 (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

 (setq package-enable-at-startup nil)
 (package-initialize nil)

 ;; Установка use-package по необходимости
 (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))

 ;; Автоустановка и автообновление пакетов
 (require 'use-package)
 (setq use-package-always-ensure t)
 #+END_SRC

** Тема

 #+BEGIN_SRC emacs-lisp
 ;; Тема
 (use-package srcery-theme
     :ensure t
     :demand
     :config
     (load-theme 'srcery t))

 ;;(use-package doom-themes
 ;;  :if (window-system)
 ;;  :init
 ;;  (progn
 ;;    (load-theme 'doom-peacock' t)
 ;;    ;;(load-theme 'doom-solarized-light' t)
 ;;    ;; Убрать границу вокруг строки состояния активного окна
 ;;    (set-face-attribute `mode-line nil :box nil)
 ;;    ;; Убрать границу вокруг строки состояния неактивного окна
 ;;    (set-face-attribute `mode-line-inactive nil :box nil)
 ;;    ))
 #+END_SRC
 
** Строка состояни

 #+BEGIN_SRC emacs-lisp
 ;; Модлайн
 (use-package doom-modeline
       :ensure t
       :hook (after-init . doom-modeline-mode))
 #+END_SRC

** Внешний вид

 #+BEGIN_SRC emacs-lisp

 ;; Скрыть строку состояния
 ;;(setq-default mode-line-format nil)

 ;; Цвет отступа окна
 (set-face-background 'fringe "black")
 (set-background-color "black")
 (add-to-list 'default-frame-alist '(foreground-color . "white"))

 ;; Шрифт
 (set-frame-font "Hack 12" nil t)

 ;; Добавление русской раскладки, С-| для переключения
 (setq default-input-method 'russian-computer)

 ;; Лучшая отрисовка буфера
 (setq redisplay-dont-pause t)

 ;; Отключаем звуковой сигнал
 (setq ring-bell-function 'ignore)

 ;; Отключить окно приветсвия
 (setq inhibit-splash-screen  t)
 ;; Отключить приветсвенные сообщения
 (setq ingibit-startup-message t)

 ;; Отключить подсказку в пустом окне
 (setq initial-scratch-message "")
 ;; Отключить сообщение в минибуфере
 (defun display-startup-echo-area-message ()
   (message ""))

 ;; Включить текстовый режим при старте
 (setq initial-major-mode 'text-mode)

 ;; Отключаем подсказки
 (tooltip-mode -1)
 ;; Отключаем меню
 (menu-bar-mode -1)
 ;; Отключаем панель инструментов
 (tool-bar-mode -1)
 ;; Отключаем полосу прокрутки
 (scroll-bar-mode -1)
 ;; Отключить мигание курсора
 (blink-cursor-mode -1)

 ;; Отключить диалоговые окна
 (setq use-dialog-box nil)
 ;; Сокращенные ответы в минибуфере
 (defalias 'yes-or-no-p 'y-or-n-p)

 ;; Сохранить историю минибуферов
 (savehist-mode 1)
 ;; Сохранить позицию курсора
 (save-place-mode 1)
 ;; Сохранить последнюю сессию
 (desktop-save-mode 1)

 ;; Отключаем подсветку текущей строки
 (global-hl-line-mode -1)
 ;; Переключение между буферами META и стрелки
 (windmove-default-keybindings 'meta)

 ;; Прокручивать по одной строке
 (setq scroll-step 1)
 ;; Смешать буфер весли курсор в 10ти строках от края
 (setq scroll-margin 10)
 ;; Прокрутка без рывка
 (setq scroll-conservatively 10000)

 ;; Отключаем автозаполнение строки по ширине
 (auto-fill-mode -1)

 ;; Переносить по словам
 (setq word-wrap t)

 ;; Не отображать символ переноса
 ;;(global-visual-line-mode t)

 ;; Пкозывать специальный символ если строка вышла за пределы окна
 (set-default 'truncate-lines t)

 ;; Удалять выделенный текст при вводе
 (delete-selection-mode)
 ;; Подсвечивать парные скобки
 (show-paren-mode)
 ;; Подсвечивать содержимое
 ;;(setq show-paren-style 'expression)

 ;; Отоброжать номер символа в строке
 (column-number-mode)
 ;; Отображать размер файла
 (size-indication-mode)
 ;; Отобажать время
 (display-time-mode)
 ;; Формат времени
 (setq-default display-time-24hr-format t)

 ;; Отключить курсор в неактивных окнах
 (setq cursor-in-non-selected-windows nil)
 ;; Табуляция из четырех символов
 (setq default-tab-widthq 4)

 ;; Тип курсора
 (setq-default cursor-type 'hollow)
 ;; Цвет курсора
 ;;(set-cursor-color "#ff0000")
 #+END_SRC

** Резервное копирование

 #+BEGIN_SRC emacs-lisp
 ;;
 ;; Резервное копирование
 ;;

 (let ((backup-dir "~/.emacs.d/backups")
       (auto-saves-dir "~/.emacs.d/auto-saves/"))
   (dolist (dir (list backup-dir auto-saves-dir))
     (when (not (file-directory-p dir))
       (make-directory dir t)))
   (setq backup-directory-alist `(("." . ,backup-dir))
	 auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
	 auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
	 tramp-backup-directory-alist `((".*" . ,backup-dir))
	 tramp-auto-save-directory auto-saves-dir))

 (setq make-backup-files t               ; Создавать резервную копию при первом сохранении
       backup-by-copying t               ; Копировать, а не создавать ссылки
       version-control t                 ; Добавлять номер версии в имя файла
       delete-old-versions t             ; Удалять старые резервные копии
       kept-old-versions 5               ; Сохранять старые версии
       kept-new-versions 10              ; Сохранять новые версии
       auto-save-default t               ; Автоматическое сохранение
       auto-save-timeout 20              ; Сохранять каждые 20 секунд
       auto-save-interval 200            ; Сохранять через кажды 200 набраных символов
       )
 #+END_SRC

** Пути

 #+BEGIN_SRC emacs-lisp
 ;; Пути
 (use-package exec-path-from-shell
   :config (exec-path-from-shell-initialize))
 (add-to-list 'exec-path "/usr/local/bin")
 (add-to-list 'exec-path "/Library/TeX/texbin")
 #+END_SRC

* Пакеты
** eshell

 #+BEGIN_SRC emacs-lisp
 ;; eshell
 (add-hook 'shell-mode-hook
	   (lambda ()
	     (define-key shell-mode-map (kbd "<M-up>") 'comint-previous-input)
	     (define-key shell-mode-map (kbd "<M-down>") 'comint-next-input)))
 #+END_SRC

** org-mode

 #+BEGIN_SRC emacs-lisp
 ;; org-mode
 (use-package org
   :ensure t
   :mode ("\\.org\\'" . org-mode)
   :bind (("C-c a" . org-agenda))
   :config
   (progn
     (setq org-directory "~/Drive/projects/")
     (setq org-agenda-files
	   (mapcar (lambda (path) (concat org-directory path))
		   '("/todo.org")))

 (use-package org-bullets
   :hook (org-mode . org-bullets-mode)
   :config
   (setq org-bullets-bullet-list '("◉" "⁑" "⁂" "❖" "✮" "✱" "✸")))
 
 ;; Использовать xelatex.b
 (setq org-latex-compiler "xelatex")
 ;; Подсветка блока с кодом.
 (setq org-src-fontify-natively t)))
 #+END_SRC

** projectile

 #+BEGIN_SRC emacs-lisp
 ;; https://github.com/bbatsov/projectile
 (use-package projectile
   :ensure t
   :config
   (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
   (projectile-mode +1))
 #+END_SRC

** multiple-cursors

 #+BEGIN_SRC emacs-lisp
 ;; https://github.com/magnars/multiple-cursors.el
 (use-package multiple-cursors
   :ensure t
   :bind (("C-S-c C-S-c" . mc/edit-lines)
	  ("C->" . mc/mark-next-like-this)
	  ("C-<" . mc/mark-previous-like-this)
	  ("C-c o" . mc/mark-all-like-this)))
 #+END_SRC

** yasnippet

 #+BEGIN_SRC emacs-lisp
 ;; https://github.com/joaotavora/yasnippet
 (use-package yasnippet
   :diminish yas-minor-mode
   :ensure t
   :config
   (yas-global-mode t)
   :init
   (setq yas-alias-to-yas/prefix-p nil))
 (use-package yasnippet-snippets
   :ensure t)
 #+END_SRC

** company

 #+BEGIN_SRC emacs-lisp
 ;; https://company-mode.github.io
 (use-package company
   :ensure t
   :diminish company-mode
   :bind ("C-<tab>" . company-complete)
   :config
   (global-company-mode t))
 #+END_SRC

** indent-guide

 #+BEGIN_SRC emacs-lisp
 ;; https://github.com/zk-phi/indent-guide
 (use-package indent-guide
   :config (indent-guide-global-mode 1))
 #+END_SRC

** markdown-mode

 #+BEGIN_SRC emacs-lisp
 ;; markdown-mode
 (use-package markdown-mode
   :mode "\\.md\\'"
   :ensure t)
 #+END_SRC

** emmet-mode

 #+BEGIN_SRC emacs-lisp
 ;; https://github.com/smihica/emmet-mode
 (use-package emmet-mode
   :diminish emmet-mode
   :init (require 'emmet-mode)
   :config (progn
	     (add-hook 'html-mode-hook 'emmet-mode)
	     (add-hook 'sgml-mode-hook 'emmet-mode)
	     (add-hook 'css-mode-hook 'emmet-mode)
	     (add-hook 'web-mode-hook 'emmet-mode)))
 #+END_SRC

** zoom

 #+BEGIN_SRC emacs-lisp
 ;; https://github.com/cyrus-and/zoom
 (use-package zoom
   :config
   (setq zoom-size '(0.5 . 0.8))
   (zoom-mode t))
 #+END_SRC

** pug-mode

 #+BEGIN_SRC emacs-lisp
 ;; php-mode
 (use-package php-mode
   :ensure t
   :mode
   ("\\.php\\'" . php-mode))
 #+END_SRC

** js2-mode

 #+BEGIN_SRC emacs-lisp
 ;; https://github.com/mooz/js2-mode
 (use-package js2-mode
   :ensure    t
   :config
   (add-hook 'js-mode-hook #'js2-minor-mode))
 #+END_SRC

** web-mode

 #+BEGIN_SRC emacs-lisp
 ;; web-mode
 (use-package web-mode
   :ensure t
   :mode ("\\.html\\'"
	  "\\.css\\'"
	  "\\.php\\'")
   :config
   (progn
     (setq web-mode-code-indent-offset 2)
     (setq web-mode-enable-auto-quoting nil)))
 #+END_SRC

** magit

 #+BEGIN_SRC emacs-lisp
 ;; https://magit.vc
 (use-package magit
   :ensure t
   :bind
   ("C-x g" . magit-status))
 #+END_SRC

** htmlize

 #+BEGIN_SRC emacs-lisp
 ;;https://github.com/hniksic/emacs-htmlize
 (use-package htmlize
   :commands (htmlize-buffer
	      htmlize-file
	      htmlize-many-files
	      htmlize-many-files-dired
	      htmlize-region))
 #+END_SRC

** ace-jump-mode

 #+BEGIN_SRC emacs-lisp
 (use-package ace-jump-mode
   :diminish ace-jump-mode
   :config (progn
	     (autoload
	       'ace-jump-mode
	       "ace-jump-mode"
	       "Emacs quick move minor mode"
	       t)
	     ;; you can select the key you prefer to
	     ;;(define-key global-map (kbd "C-c SPC") 'ace-jump-mode
	     (define-key global-map (kbd "C-c SPC") 'ace-jump-char-mode))
   :ensure t)
 #+END_SRC

** smartparens

 #+BEGIN_SRC emacs-lisp
 ;; https://github.com/Fuco1/smartparens
 (use-package smartparens
   :diminish smartparens-mode
   :init (smartparens-global-mode 1)
   :ensure t)
 #+END_SRC

** ivy

 #+BEGIN_SRC emacs-lisp
 ;; https://github.com/abo-abo/swiper
 (use-package ivy
   :ensure t
   :config
   (ivy-mode 1)
   (setq ivy-use-virtual-buffers t)
   (setq enable-recursive-minibuffers t)
   (global-set-key (kbd "C-c C-r") 'ivy-resume)
   (global-set-key (kbd "<f6>") 'ivy-resume))
 #+END_SRC

** swiper

 #+BEGIN_SRC emacs-lisp
 (use-package swiper
   :ensure t
   :config
   (global-set-key "\C-s" 'swiper))
 #+END_SRC

** counsel

 #+BEGIN_SRC emacs-lisp
 (use-package counsel
   :ensure t
   :config
   (global-set-key (kbd "M-x") 'counsel-M-x)
   (global-set-key (kbd "C-x C-f") 'counsel-find-file))
 #+END_SRC

** tex

 #+BEGIN_SRC emacs-lisp
 ;; https://www.gnu.org/software/auctex/
 (use-package tex
   :ensure auctex
   :config
   (setq pdf-latex-command "xelatex")
   )
 #+END_SRC

** latex-preview-pane - ОТКЛЮЧЕН!

 #+BEGIN_SRC emacs-lisp
 ;;(use-package latex-preview-pane
 ;;    :commands latex-preview-pane-mode
 ;;    :diminish latex-preview-pane-mode
 ;;    :init (add-hook 'LaTeX-mode-hook
 ;;                    '(lambda ()
 ;;                       (delete-other-windows)
 ;;                       (latex-preview-pane-mode))))
 ;;(add-hook 'LaTeX-mode-hook #'visual-line-mode)
 #+END_SRC

** elpy

 #+BEGIN_SRC emacs-lisp
 ;; Поддержка python
 (use-package elpy
   :ensure t
   :init
   (elpy-enable))
 #+END_SRC
