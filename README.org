#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+SETUPFILE: https://raw.githubusercontent.com/anshustov/template/master/article.org
#+STARTUP: content

#+TITLE:     Emacs
#+AUTHOR:    Алексей Шустов
#+EMAIL:     anshustov@gmail.com
#+DATE:      2020



* Введение
** Описание

   ВАЖНО: Работоспособность проверена только на OsX.

   Данная конфигурация Emacs создана с целью адаптировать его для WEB разработки в самом минималистичном дизайне.
   Целью создания была адаптация под маленькие экраны ноутбуков. Отключены все визуальные элементы emacs.

** ЗАДАЧА: Сочетания клавиш                             :@разработка:сделать:
** ЗАДАЧА: Установка                                    :@разработка:сделать:

+ all-the-icons-install-fonts - выполнить после загрузки пакетов при первом запуске в минибуфере (M-x);

*** Установка необходимого в OsX

    В терминале:

+ Скачать и установить [[https://emacsformacosx.com][Emacs]]. 
  Примечание: Версия из homebrew emacs-plus не запускается из spotlight.

#+BEGIN_SRC bash
open https://emacsformacosx.com
#+END_SRC

+ Переходим в папку пользователя
#+BEGIN_SRC bash
cd ~/
#+END_SRC

+ Homebrew - пакетный менеджер для OsX
#+BEGIN_SRC bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#+END_SRC

+ Установка git
#+BEGIN_SRC bash
brew install git
#+END_SRC

+ Установка шрифта Hack
#+BEGIN_SRC bash
brew tap caskroom/fonts
brew cask install font-hack
#+END_SRC

+ Скачивание конфигурации с github
#+BEGIN_SRC bash
git clone https://github.com/anshustov/.emacs.d.git
#+END_SRC

* Конфигурация
** Менеджмент пакетов

   Автоматическая установка и обновление пакетов, используемых в use-package.

#+BEGIN_SRC emacs-lisp
(require 'package)

(setq load-prefer-newer t)
(setq warning-minimum-level :emergency)

(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
;;(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

(setq package-enable-at-startup nil)
(package-initialize nil)

;; Установка use-package по необходимости
(unless (package-installed-p 'use-package)
(package-refresh-contents)
(package-install 'use-package))

;; Автоустановка и автообновление пакетов
(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

** Сервер

#+BEGIN_SRC emacs-lisp
(use-package server
  :config
  (progn
    (defun server-enable ()
      (unless (server-running-p)
        (server-start)))
    (add-hook 'after-init-hook 'server-enable t)))
#+END_SRC

** Тема

   Цвет фона изменен в следующем разделе.

   Ссылка на проект:

   https://github.com/srcery-colors/srcery-emacs

#+BEGIN_SRC emacs-lisp
	;; Тема nord-theme 'srcery
	(use-package srcery-theme
			:ensure t
			:demand
			:config
			(setq srcery-black "#000000")
			(load-theme 'srcery t))
#+END_SRC

** Цвета                                                :@разработка:изучить:


	 Меняем цвет фона, рамки и шрифта.

#+BEGIN_SRC emacs-lisp
;; Цвет рамки
;;(set-face-background 'fringe "black")
;; Цвет фона
;;(set-background-color "black")
;; Цвет текста
;;(set-foreground-color "white")
#+END_SRC

** Шрифт hack

   
   Hack - шрифт моноширинный c однозначным начертанием символов. необходимо скачать и установить в систему.

   ссылка на проект:

   https://github.com/source-foundry/hack
   
#+BEGIN_SRC emacs-lisp
;; Шрифт
;;(set-frame-font "Hack 12" nil t)
;;(set-fontset-font "fontset-default" 'cyrillic "DejaVu Sans Mono")
(set-frame-font "Arialt" nil t)
#+END_SRC

** Пути

   Пакет читает глобальную переменную $PATH.

#+BEGIN_SRC emacs-lisp
;; ПакетE
(use-package exec-path-from-shell
  :config (exec-path-from-shell-initialize))
  ;;(add-to-list 'exec-path "/usr/local/bin")
  ;;(add-to-list 'exec-path "/Library/TeX/texbin")
  ;;(add-to-list 'exec-path "/Users/anshustov/go/bin")
#+END_SRC

** Отключаем элементы управления

   Отключаем все визуальные элементы управления.

#+BEGIN_SRC emacs-lisp
;; Отключить окно приветсвия
(setq inhibit-splash-screen  t)
;; Отключить приветсвенные сообщения
(setq ingibit-startup-message t)
;; Отключить подсказку в пустом окне
(setq initial-scratch-message "")
;; Отключить сообщение в минибуфере
(defun display-startup-echo-area-message ()
  (message ""))
;; Отключаем подсказки
(tooltip-mode -1)
;; Отключаем меню
(menu-bar-mode -1)
;; Отключаем панель инструментов
(tool-bar-mode -1)
;; Отключаем полосу прокрутки
(scroll-bar-mode -1)
;; Отключить диалоговые окна
(setq use-dialog-box nil)
;; Сокращенные ответы в минибуфере
(defalias 'yes-or-no-p 'y-or-n-p)
;; Скрыть строку состояния(необходимо отключить doom-modeline)
;;(setq-default mode-line-format nil)
#+END_SRC

** Курсор

   Настройки курсора.

#+BEGIN_SRC emacs-lisp
;; Тип курсора
(setq-default cursor-type 'box)
;; Цвет курсора
(add-to-list 'default-frame-alist '(cursor-color . "#EF2F27"))
;; Отключить мигание курсора
(blink-cursor-mode -1)
;; Отключить курсор в неактивных окнах
(setq cursor-in-non-selected-windows nil)
#+END_SRC

** Сохранение состаяния

#+BEGIN_SRC emacs-lisp
;; Сохранить историю минибуферов
(savehist-mode 1)
;; Сохранить позицию курсора
(save-place-mode 1)
;; Сохранить последнюю сессию
(desktop-save-mode 1)
#+END_SRC

** Прокрутка

#+BEGIN_SRC emacs-lisp
;; Прокручивать по одной строке
(setq scroll-step 1)
;; Смешать буфер если курсор в 10ти строках от края
(setq scroll-margin 10)
;; Прокрутка без рывка
(setq scroll-conservatively 10000)
#+END_SRC

** Строка сотсояния

#+BEGIN_SRC emacs-lisp
;; Отоброжать номер символа в строке
(column-number-mode)
;; Отображать размер файла
(size-indication-mode)
;; Отобажать время
(display-time-mode)
;; Формат времени
(setq-default display-time-24hr-format t)
#+END_SRC

** Текст

#+BEGIN_SRC emacs-lisp
;; Добавление русской раскладки, С-| для переключения
;; C-x RET C-\ выбор раскладки
(setq default-input-method 'cyrillic-jis-russian)
;; Отключаем автозаполнение строки по ширине
(auto-fill-mode -1)
;; Переносить по словам
;;(setq word-wrap t)
;; Не отображать символ переноса
;;(global-visual-line-mode t)
;; Отключаем подсветку текущей строки
(global-hl-line-mode -1)
;; Пкозывать специальный символ если строка вышла за пределы окна
(set-default 'truncate-lines t)
;; Удалять выделенный текст при вводе
(delete-selection-mode)
;; Подсвечивать парные скобки
(show-paren-mode)
;; Подсвечивать содержимое
;;(setq show-paren-style 'expression)
;; Табуляция из четырех символов
(setq-default tab-width 2)
#+END_SRC

** Резервное копирование

#+BEGIN_SRC emacs-lisp
;; Резервное копирование
(let ((backup-dir "~/.emacs.d/backups")
(auto-saves-dir "~/.emacs.d/auto-saves/"))
   (dolist (dir (list backup-dir auto-saves-dir))
     (when (not (file-directory-p dir))
       (make-directory dir t)))
   (setq backup-directory-alist `(("." . ,backup-dir))
	 auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
	 auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
	 tramp-backup-directory-alist `((".*" . ,backup-dir))
	 tramp-auto-save-directory auto-saves-dir))

 (setq make-backup-files t               ; Создавать резервную копию при первом сохранении
       backup-by-copying t               ; Копировать, а не создавать ссылки
       version-control t                 ; Добавлять номер версии в имя файла
       delete-old-versions t             ; Удалять старые резервные копии
       kept-old-versions 5               ; Сохранять старые версии
       kept-new-versions 10              ; Сохранять новые версии
       auto-save-default t               ; Автоматическое сохранение
       auto-save-timeout 20              ; Сохранять каждые 20 секунд
       auto-save-interval 200            ; Сохранять через кажды 200 набраных символов
       )
 #+END_SRC

** Разное

#+BEGIN_SRC emacs-lisp
;; Лучшая отрисовка буфера
;;(setq redisplay-dont-pause t)
;; Отключаем звуковой сигнал
(setq ring-bell-function 'ignore)
;; Включить текстовый режим при старте
(setq initial-major-mode 'text-mode)
;; Переключение между буферами META и стрелки
(windmove-default-keybindings 'meta)
#+END_SRC

* Пакеты
** doom-modeline-mode

   Строка состояний

   Ссылка на проект:

   https://github.com/seagle0128/doom-modeline

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :init 
    (setq auto-revert-check-vc-info t
      doom-modeline-persp-name              nil
      doom-modeline-buffer-encoding         nil
      doom-modeline-icon                    t
      doom-modeline-buffer-file-name-style  'truncate-with-project)
      (doom-modeline-mode 1)

    (set-face-attribute 'mode-line nil
      :background "#204060"
      :foreground "white")
    (set-face-attribute 'mode-line-inactive nil
      :background "#203040"
      :foreground "white"))
#+END_SRC

** indent-guide

   Отображает уровень вложенности строк относительно текущей табуляции строки.

   Ссылка на проект:

   https://github.com/zk-phi/indent-guide

#+BEGIN_SRC emacs-lisp
(use-package indent-guide
  :ensure t
  :config (indent-guide-global-mode 1))
#+END_SRC

** Rainbow-Delimiters

   Окрашивает парные скобки.

   Ссылка на проект:

   [[https://github.com/Fanael/rainbow-delimiters]]

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Zoom

   Автоматически увеличивает размер активного буфера.

   Ссылка на проект:

   https://github.com/cyrus-and/zoom

#+BEGIN_SRC emacs-lisp
(use-package zoom
  :ensure t
  :config
  (setq zoom-size '(0.4 . 0.8))
  (zoom-mode t))
#+END_SRC

** eshell

   Настройки сочетаний клавиш eshell

#+BEGIN_SRC emacs-lisp
(add-hook 'shell-mode-hook
  (lambda ()
    (define-key shell-mode-map (kbd "<M-up>") 'comint-previous-input)
    (define-key shell-mode-map (kbd "<M-down>") 'comint-next-input)))
#+END_SRC
 
** magit

   Оболочка для управления git в emacs.

   Ссылка на проект:

   https://magit.vc

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind
  ("C-x g" . magit-status))
#+END_SRC

* Среда разработки
** org-mode

*Режим* работы с задачами и заметками.

Ссылка на проект:
https://orgmode.org

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :mode ("\\.org\\'" . org-mode)
  :bind (("C-c c" . org-capture)
         ("C-c a" . org-agenda))
  :config
  (progn
;; Путь к файлам org-mode.
    (setq org-directory "~/Google Диск/org")
;; Имя файла расписания.
    (setq org-agenda-files
      (mapcar (lambda (path) (concat org-directory path))
        '("/agenda.org")))
;; Размеры заголовков
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
)
;; Варианты символов: ↴ ⬎ ⤵ ¶ ◦◦◦ ➢ ➤ ⫎ ➜
;;    (setq org-ellipsis "➤")
;; Цвет org-ellipsis (символ после заголовка).
;;    (custom-set-faces '(org-ellipsis ((t (:foreground "#EF2F27" :underline nil)))))
;; Ключеваые слова
    (setq org-todo-keywords
;; Статусы (t-task, c-curent, d-done n-note)
      '((sequence "ЗАДАЧА:(t)" "ТЕКУЩЕЕ:(p)" "ОТЛОЖЕНО:(w@)" "|" "ВЫПОЛНЕНО:(d!)")
;; Список дел
        (sequence "[ ](T)" "[-](P)" "[?](N@)" "|" "[X](D)")))
;; Цвета ключевых слов
    (setq org-todo-keyword-faces
      '(("ЗАДАЧА:" . (:foreground "red" :weight bold))
        ("ТЕКУЩЕЕ:" . (:foreground "green" :weight bold))
        ("ОТЛОЖЕНО:" . (:foreground "yellow" :weight bold))
        ("ВЫПОЛНЕНО:" . (:foreground "gray" :weight bold))
        ("[ ]" . (:foreground "red" :weight bold))
        ("[-]" . (:foreground "green" :weight bold))
        ("[?]" . (:foreground "yellow" :weight bold))
        ("[X]" . (:foreground "gray" :weight bold))))
;; Списрк тегов.
    (setq org-tag-alist
      '((:startgroup)
        ("@дома" . ?h)
        ("@на_работе" . ?w)
        ("@онлайн" . ?o)
        ("@разработка" . ?d)
        (:endgroup)
        (:startgroup)
        ("изучить" . ?l)
        ("спланировать" . ?p)
        ("сделать" . ?m)
        ("проверить" . ?t)
        (:endgroup)))
))

(use-package org-bullets
   :hook (org-mode . org-bullets-mode)
   :config
   (setq org-bullets-bullet-list '("◉" "◎" "○" "✱" "▶")))

 ;; Использовать xelatex
 (setq org-latex-compiler "xelatex")
 ;; Подсветка блока с кодом.
 ;;(setq org-src-fontify-natively t)
 #+END_SRC

** auctex

   Мульти языковой пакет для Tex подобной разметки (LaTex, XeLatex и т.д).

   Ссылка на проект:

   https://github.com/jwiegley/auctex
   
#+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure auctex
  :config
  (setq pdf-latex-command "xelatex")
  (setq-default TeX-engine 'xetex)
  (setq-default TeX-PDF-mode t))
#+END_SRC

** -!- latex-preview-pane

   Панель автоматического просмотра pdf файла после сохранения org или tex файла.
   Отключен: в windows пока не удалось заставить работать автоматически.

   Ссылка на проект:

   https://github.com/jsinglet/latex-preview-pane

#+BEGIN_SRC emacs-lisp
(use-package latex-preview-pane
  :disabled
  :commands latex-preview-pane-mode
  :diminish latex-preview-pane-mode
  :init (add-hook 'LaTeX-mode-hook
                  '(lambda ()
                   (delete-other-windows)
                   (latex-preview-pane-mode))))
(add-hook 'LaTeX-mode-hook #'visual-line-mode)
#+END_SRC

** -!- pdf-tools

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :disabled
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :ensure t
  :init (add-hook 'pdf-view-mode-hook 'pdf-view-fit-page-to-window))
#+END_SRC

** projectile

		Управление проектами.

		Ссылка на проект:

		https://github.com/bbatsov/projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))

(use-package counsel-projectile
  :ensure t
  :commands (counsel-projectile-mode)
  :init
  (progn
    (projectile-mode +1)
    (counsel-projectile-mode)))
#+END_SRC

** htmlize
   Оформляет код в HTML для отображения на странице в виде блока.

   Ссылка на проект:

   https://github.com/hniksic/emacs-htmlize

#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :commands (
	  htmlize-buffer
	  htmlize-file
	  htmlize-many-files
	  htmlize-many-files-dired
	  htmlize-region))
#+END_SRC

** markdown-mode

   Языковой пакет для markdown.

   Ссылка на проект:

   https://github.com/jrblevin/markdown-mode

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode "\\.md\\'"
  :ensure t)
#+END_SRC

** emmet-mode

	 Добовляем функционал emmet.

	 Ссылка на проект:

	 https://github.com/smihica/emmet-mode

#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :diminish emmet-mode
  :init (require 'emmet-mode)
  :config (progn
	  (add-hook 'html-mode-hook 'emmet-mode)
	  (add-hook 'sgml-mode-hook 'emmet-mode)
	  (add-hook 'css-mode-hook 'emmet-mode)
	  (add-hook 'web-mode-hook 'emmet-mode)))
#+END_SRC

** flycheck

	 Синтаксис языков программирования.
	 
	 Ссылка на проект:

	 https://www.flycheck.org/

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

** company

	 Автодополнение при написании кода.

	 Ссылка на проект:

	 http://company-mode.github.io
	 
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :diminish company-mode
  :bind ("C-<tab>" . company-complete)
  :config
    (global-company-mode t))
#+END_SRC

** yasnippet

	 Пакет для работы со снипетами (заготовками кода).

	 Ссылка на проект:

	 http://joaotavora.github.io/yasnippet/snippet-organization.html

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :ensure t
  :config
    (yas-global-mode t)
	:init
    (setq yas-alias-to-yas/prefix-p nil))
 (use-package yasnippet-snippets
   :ensure t)
 #+END_SRC
 
** multiple-cursors

   Пакет позволяющий включить несколько курсоров для одновременного ввода в нескольких местах.

   Ссылка на проект:

   https://github.com/magnars/multiple-cursors.el

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
	 ("C-<" . mc/mark-previous-like-this)
	 ("C-c o" . mc/mark-all-like-this)
	 ("C-g" . mc/keyboard-quit)))
#+END_SRC

** ace-jump-mode

   Пакет для прыжков по тексту.

   Ссылка на проект:

   https://github.com/winterTTr/ace-jump-mode

#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :commands ace-jump-mode
  :init
  (bind-key "C-." 'ace-jump-mode))
#+END_SRC

** ace-window

   Пакет для работы с окнами.

   Ссылка на проект:

	 https://github.com/abo-abo/ace-window

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
              aw-char-position 'left
              aw-ignore-current nil
              aw-leading-char-style 'char
              aw-scope 'frame)
  :bind (("M-o" . ace-window)
         ("M-O" . ace-swap-window)))
#+END_SRC

** undo-tree

   Дерево изменение.

   Ссылка на проект:

   https://github.com/emacsmirror/undo-tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init
    (global-undo-tree-mode))
#+END_SRC

** all-the-icons

   Иконки.

   Ссылка на проект:

   https://github.com/domtronn/all-the-icons.el

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t) 
#+END_SRC

** dired

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :ensure t
  :after all-the-icons
  :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

** smartparens

   smartparens

   Ссылка на проект:

   https://github.com/Fuco1/smartparens

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :diminish smartparens-mode
  :init (smartparens-global-mode 1))
#+END_SRC

** ivy

   Упрощает работу с минибуфером.
 
   Ссылка на проект:
   
   https://github.com/abo-abo/swiper

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume))
#+END_SRC

** swiper

   swiper

   Ссылка на проект:

   https://github.com/abo-abo/swiper

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :config
  (global-set-key "\C-s" 'swiper))
 #+END_SRC

** counsel

   counsel

   Ссылка на проект:

   https://github.com/abo-abo/swiper

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (setq counsel-find-file-ignore-regexp "\\(?:\\`\\|[/\\]\\)\\(?:[#.]\\)"))
 #+END_SRC

** which-key

   Отображает вариации для завершения комбинации клавиш.
 
   Ссылка на проект:

   [[https://github.com/justbur/emacs-which-key]]

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :config
  (setq which-key-idle-delay 1)
  (which-key-setup-minibuffer))
#+END_SRC§
* Языки
** lsp-mode

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (go-mode . lsp-deferred)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands (lsp lsp-deferred))
#+END_SRC

** lsp-ui

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui 
	:commands lsp-ui-mode)
;; if you are helm user
;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
#+END_SRC

** lsp-ivy

#+BEGIN_SRC emacs-lisp
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
;;(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
;;(use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

;; optional if you want which-key integration
;;(use-package which-key
;;    :config
;;    (which-key-mode))
#+END_SRC

** -!- company-lsp

#+BEGIN_SRC emacs-lisp
;;(use-package company-lsp
;;  :disabled
;;  :config (push 'company-lsp company-backends))

;;(use-package company-box
;;  :disabled
;;  :hook (company-mode . company-box-mode))
#+END_SRC

** golang

#+BEGIN_VERSE
*Командная строка:
brew install golang
echo 'export GOPATH=~/go:~/Drive/dev/go' >> ~/.zshrc
echo 'export GOROOT=/usr/local/opt/go/libexec' >> ~/.zshrc
echo 'export PATH=$PATH:$GOPATH/bin' >> ~/.zshrc
echo 'export PATH=$PATH:$GOROOT/bin' >> ~/.zshrc
source ~/.zshrc
#+END_VERSE

#+BEGIN_SRC emacs-lisp
(use-package go-mode)
#+END_SRC

* Тест

#+BEGIN_SRC emacs-lisp
(use-package pass
  :ensure
  :config
    (setq password-store-executable "pass"))

(use-package aggressive-indent
  :config
    (global-aggressive-indent-mode 1))

(use-package dimmer
  :ensure t
  :custom (dimmer-fraction 0.3)
  :init (dimmer-mode))
 #+END_SRC
** ЗАДАЧА: установка языковых серверов

#+BEGIN_VERSE
npm i -g bash-language-server
npm install -g vscode-html-languageserver-bin
npm install -g vscode-css-languageserver-bin
npm install -g intelephense
#+END_VERSE

** web-mode

	 Мульти языковой пакет.

	 Ссылка на проект:

	 http://web-mode.org

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode (
	  "\\.html\\'"
	  "\\.css\\'"
	  "\\.php\\'")
  :config
    (progn
      (setq web-mode-code-indent-offset 2)
			(setq web-mode-enable-auto-quoting nil)))
 #+END_SRC

** pug-mode

	 Режим pug

	 Ссылка на проект:

	 https://github.com/hlissner/emacs-pug-mode

#+BEGIN_SRC emacs-lisp
(use-package php-mode
  :ensure t
  :mode
    ("\\.php\\'" . php-mode))
#+END_SRC

** js2-mode

	 js2-mode

	 Ссылка на проект:

	 https://github.com/mooz/js2-mode

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :config
    (add-hook 'js-mode-hook #'js2-minor-mode))
#+END_SRC

** elpy

	 Поддержка python.

	 Ссылка на проект:

	 https://github.com/jorgenschaefer/elpy

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
	:init
	  (elpy-enable))
#+END_SRC

